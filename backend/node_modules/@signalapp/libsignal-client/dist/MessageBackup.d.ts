/// <reference types="node" />
/**
 * Message backup validation routines.
 *
 * @module MessageBackup
 */
import * as Native from '../Native';
import { Aci } from './Address';
import { InputStream } from './io';
export type InputStreamFactory = () => InputStream;
/**
 * Result of validating a message backup bundle.
 */
export declare class ValidationOutcome {
    /**
     * A developer-facing message about the error encountered during validation,
     * if any.
     */
    errorMessage: string | null;
    /**
     * Information about unknown fields encountered during validation.
     */
    unknownFieldMessages: string[];
    /**
     * `true` if the backup is valid, `false` otherwise.
     *
     * If this is `true`, there might still be messages about unknown fields.
     */
    get ok(): boolean;
    constructor(outcome: Native.MessageBackupValidationOutcome);
}
/**
 * Key used to encrypt and decrypt a message backup bundle.
 */
export declare class MessageBackupKey {
    readonly _nativeHandle: Native.MessageBackupKey;
    /**
     * Create a public key from the given master key and ACI.
     *
     * `masterKeyBytes` should contain exactly 32 bytes.
     */
    constructor(masterKeyBytes: Buffer, aci: Aci);
}
export declare enum Purpose {
    DeviceTransfer = 0,
    RemoteBackup = 1
}
/**
 * Validate a backup file
 *
 * @param backupKey The key to use to decrypt the backup contents.
 * @param purpose Whether the backup is intended for device-to-device transfer or remote storage.
 * @param inputFactory A function that returns new input streams that read the backup contents.
 * @param length The exact length of the input stream.
 * @returns The outcome of validation, including any errors and warnings.
 * @throws IoError If an IO error on the input occurs.
 */
export declare function validate(backupKey: MessageBackupKey, purpose: Purpose, inputFactory: InputStreamFactory, length: bigint): Promise<ValidationOutcome>;
