
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  countryCode: 'countryCode',
  identityKey: 'identityKey',
  registrationId: 'registrationId',
  name: 'name',
  about: 'about',
  avatarUrl: 'avatarUrl',
  isOnline: 'isOnline',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrekeyBundleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  keyId: 'keyId',
  publicKey: 'publicKey',
  signature: 'signature',
  isUsed: 'isUsed',
  createdAt: 'createdAt'
};

exports.Prisma.SignedPrekeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  keyId: 'keyId',
  publicKey: 'publicKey',
  signature: 'signature',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.SessionStateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  remoteUserId: 'remoteUserId',
  sessionData: 'sessionData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  groupId: 'groupId',
  encryptedContent: 'encryptedContent',
  messageType: 'messageType',
  timestamp: 'timestamp',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  status: 'status',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  replyToId: 'replyToId',
  isForwarded: 'isForwarded',
  mediaFileId: 'mediaFileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  avatarUrl: 'avatarUrl',
  creatorId: 'creatorId',
  senderKeyDistribution: 'senderKeyDistribution',
  isPublic: 'isPublic',
  maxMembers: 'maxMembers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.UserContactScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  contactId: 'contactId',
  name: 'name',
  isBlocked: 'isBlocked',
  createdAt: 'createdAt'
};

exports.Prisma.MediaFileScalarFieldEnum = {
  id: 'id',
  uploaderId: 'uploaderId',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  mediaType: 'mediaType',
  isUploaded: 'isUploaded',
  uploadedAt: 'uploadedAt',
  encryptionKey: 'encryptionKey',
  s3Key: 's3Key',
  s3Bucket: 's3Bucket',
  thumbnailUrl: 'thumbnailUrl',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  isRevoked: 'isRevoked'
};

exports.Prisma.OtpAttemptScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  otpCode: 'otpCode',
  attempts: 'attempts',
  isVerified: 'isVerified',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SignalIdentityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  identityPublicKey: 'identityPublicKey',
  identityPrivateKey: 'identityPrivateKey',
  registrationId: 'registrationId',
  createdAt: 'createdAt'
};

exports.Prisma.SignalSessionScalarFieldEnum = {
  id: 'id',
  localUserId: 'localUserId',
  remoteUserId: 'remoteUserId',
  deviceId: 'deviceId',
  sessionData: 'sessionData',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed'
};

exports.Prisma.SenderKeyScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  senderId: 'senderId',
  deviceId: 'deviceId',
  keyData: 'keyData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SignalMessageMetadataScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  cipherType: 'cipherType',
  deviceId: 'deviceId',
  senderKeyDistribution: 'senderKeyDistribution'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactUserId: 'contactUserId',
  customName: 'customName',
  isBlocked: 'isBlocked',
  isMuted: 'isMuted',
  addedAt: 'addedAt'
};

exports.Prisma.DeletedMessageScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  DOCUMENT: 'DOCUMENT',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT',
  STICKER: 'STICKER'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.GroupMemberRole = exports.$Enums.GroupMemberRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  DOCUMENT: 'DOCUMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  PrekeyBundle: 'PrekeyBundle',
  SignedPrekey: 'SignedPrekey',
  SessionState: 'SessionState',
  Message: 'Message',
  Group: 'Group',
  GroupMember: 'GroupMember',
  UserContact: 'UserContact',
  MediaFile: 'MediaFile',
  RefreshToken: 'RefreshToken',
  OtpAttempt: 'OtpAttempt',
  SignalIdentity: 'SignalIdentity',
  SignalSession: 'SignalSession',
  SenderKey: 'SenderKey',
  SignalMessageMetadata: 'SignalMessageMetadata',
  Contact: 'Contact',
  DeletedMessage: 'DeletedMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
