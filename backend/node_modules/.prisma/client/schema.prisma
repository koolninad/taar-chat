generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with Signal Protocol fields
model User {
  id          String @id @default(uuid())
  phoneNumber String @unique @map("phone_number")
  countryCode String @map("country_code")

  // Signal Protocol identity
  identityKey    String @map("identity_key")
  registrationId Int    @map("registration_id")

  // Profile information
  name      String?
  about     String? @default("Hey there! I am using Taar.")
  avatarUrl String? @map("avatar_url")

  // Status and activity
  isOnline Boolean   @default(false) @map("is_online")
  lastSeen DateTime? @map("last_seen")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sentMessages     Message[]        @relation("MessageSender")
  receivedMessages Message[]        @relation("MessageRecipient")
  prekeyBundles    PrekeyBundle[]
  signedPrekeys    SignedPrekey[]
  signalIdentities SignalIdentity[] @relation("SignalIdentity")
  groupMembers     GroupMember[]
  createdGroups    Group[]          @relation("GroupCreator")
  userContacts     Contact[]        @relation("UserContacts")
  contacts         Contact[]        @relation("ContactOf")
  mediaFiles       MediaFile[]
  refreshTokens    RefreshToken[]
  otpAttempts      OtpAttempt[]
  deletedMessages  DeletedMessage[]
  sessionStates    SessionState[]
  ownedContacts    UserContact[]    @relation("ContactOwner")
  contactedBy      UserContact[]    @relation("Contact")

  @@map("users")
}

// Signal Protocol prekey bundles
model PrekeyBundle {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  deviceId  Int      @default(1) @map("device_id")
  keyId     Int      @map("key_id")
  publicKey String   @map("public_key")
  signature String
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId, keyId])
  @@map("prekey_bundles")
}

// Signal Protocol signed prekeys
model SignedPrekey {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  deviceId  Int      @default(1) @map("device_id")
  keyId     Int      @map("key_id")
  publicKey String   @map("public_key")
  signature String
  timestamp DateTime @default(now()) @map("timestamp")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId, keyId])
  @@map("signed_prekeys")
}

// Signal Protocol session states
model SessionState {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  remoteUserId String   @map("remote_user_id")
  sessionData  Bytes    @map("session_data")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, remoteUserId])
  @@map("session_states")
}

// Messages with Signal Protocol encryption
model Message {
  id          String  @id @default(uuid())
  senderId    String  @map("sender_id")
  recipientId String? @map("recipient_id")
  groupId     String? @map("group_id")

  // Signal Protocol encrypted content
  encryptedContent Bytes       @map("encrypted_content")
  messageType      MessageType @default(TEXT) @map("message_type")

  // Message metadata (minimal for privacy)
  timestamp   BigInt
  sentAt      DateTime      @default(now()) @map("sent_at")
  deliveredAt DateTime?     @map("delivered_at")
  readAt      DateTime?     @map("read_at")
  status      MessageStatus @default(SENT) @map("status")
  isDeleted   Boolean       @default(false) @map("is_deleted")
  deletedAt   DateTime?     @map("deleted_at")

  // Reply and forwarding
  replyToId   String? @map("reply_to_id")
  isForwarded Boolean @default(false) @map("is_forwarded")

  // Media reference
  mediaFileId String? @map("media_file_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sender          User                   @relation("MessageSender", fields: [senderId], references: [id])
  recipient       User?                  @relation("MessageRecipient", fields: [recipientId], references: [id])
  group           Group?                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  replyTo         Message?               @relation("MessageReply", fields: [replyToId], references: [id])
  replies         Message[]              @relation("MessageReply")
  mediaFile       MediaFile?             @relation(fields: [mediaFileId], references: [id])
  signalMetadata  SignalMessageMetadata?
  deletedMessages DeletedMessage[]

  @@map("messages")
}

// Groups with Signal Protocol sender keys
model Group {
  id          String  @id @default(uuid())
  name        String
  description String?
  avatarUrl   String? @map("avatar_url")
  creatorId   String  @map("creator_id")

  // Signal Protocol group keys
  senderKeyDistribution Bytes? @map("sender_key_distribution")

  // Group settings
  isPublic   Boolean @default(false) @map("is_public")
  maxMembers Int     @default(256) @map("max_members")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  creator  User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members  GroupMember[]
  messages Message[]

  @@map("groups")
}

// Group membership
model GroupMember {
  id       String          @id @default(uuid())
  groupId  String          @map("group_id")
  userId   String          @map("user_id")
  role     GroupMemberRole @default(MEMBER)
  joinedAt DateTime        @default(now()) @map("joined_at")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

// User contacts
model UserContact {
  id        String   @id @default(uuid())
  ownerId   String   @map("owner_id")
  contactId String   @map("contact_id")
  name      String? // Custom name for the contact
  isBlocked Boolean  @default(false) @map("is_blocked")
  createdAt DateTime @default(now()) @map("created_at")

  owner   User @relation("ContactOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  contact User @relation("Contact", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([ownerId, contactId])
  @@map("user_contacts")
}

// Media files with encryption
model MediaFile {
  id           String     @id @default(uuid())
  uploaderId   String     @map("uploader_id")
  filename     String
  originalName String     @map("original_name")
  mimeType     String     @map("mime_type")
  size         BigInt
  mediaType    MediaType? @map("media_type")

  // Upload status
  isUploaded Boolean   @default(false) @map("is_uploaded")
  uploadedAt DateTime? @map("uploaded_at")

  // Encryption metadata
  encryptionKey String? @map("encryption_key")
  s3Key         String  @map("s3_key")
  s3Bucket      String  @map("s3_bucket")

  // Thumbnails for images/videos
  thumbnailUrl String? @map("thumbnail_url")

  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  // Relations
  uploader User      @relation(fields: [uploaderId], references: [id])
  messages Message[]

  @@map("media_files")
}

// JWT refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isRevoked Boolean  @default(false) @map("is_revoked")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// OTP attempts for rate limiting
model OtpAttempt {
  id          String   @id @default(uuid())
  phoneNumber String   @map("phone_number")
  otpCode     String   @map("otp_code")
  attempts    Int      @default(1)
  isVerified  Boolean  @default(false) @map("is_verified")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations (optional, for tracking after user creation)
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_attempts")
}

// Enums
enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
  STICKER
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

// Signal Protocol Identity
model SignalIdentity {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  deviceId           Int      @map("device_id")
  identityPublicKey  String   @map("identity_public_key")
  identityPrivateKey String   @map("identity_private_key")
  registrationId     Int      @map("registration_id")
  createdAt          DateTime @default(now()) @map("created_at")

  user User @relation("SignalIdentity", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("signal_identities")
}

// Signal Protocol Sessions
model SignalSession {
  id           String   @id @default(uuid())
  localUserId  String   @map("local_user_id")
  remoteUserId String   @map("remote_user_id")
  deviceId     Int      @map("device_id")
  sessionData  String   @map("session_data")
  createdAt    DateTime @default(now()) @map("created_at")
  lastUsed     DateTime @default(now()) @map("last_used")

  @@unique([localUserId, remoteUserId, deviceId])
  @@map("signal_sessions")
}

// Signal Protocol Sender Keys for Groups
model SenderKey {
  id        String   @id @default(uuid())
  groupId   String   @map("group_id")
  senderId  String   @map("sender_id")
  deviceId  Int      @map("device_id")
  keyData   String   @map("key_data")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([groupId, senderId, deviceId])
  @@map("sender_keys")
}

// Signal Protocol Message Metadata
model SignalMessageMetadata {
  id                    String  @id @default(uuid())
  messageId             String  @unique @map("message_id")
  cipherType            Int     @map("cipher_type")
  deviceId              Int     @map("device_id")
  senderKeyDistribution String? @map("sender_key_distribution")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("signal_message_metadata")
}

// Contact model (to replace UserContact)
model Contact {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  contactUserId String   @map("contact_user_id")
  customName    String?  @map("custom_name")
  isBlocked     Boolean  @default(false) @map("is_blocked")
  isMuted       Boolean  @default(false) @map("is_muted")
  addedAt       DateTime @default(now()) @map("added_at")

  user        User @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contactUser User @relation("ContactOf", fields: [contactUserId], references: [id], onDelete: Cascade)

  @@unique([userId, contactUserId])
  @@map("contacts")
}

// Deleted Messages (for "delete for me" functionality)
model DeletedMessage {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  deletedAt DateTime @default(now()) @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("deleted_messages")
}
